import {
    async, ComponentFixture, fakeAsync, inject, TestBed, tick
  } from '@angular/core/testing';
  
  import { By }           from '@angular/platform-browser';
  import { DebugElement } from '@angular/core';
  
  import {
    ActivatedRoute, ActivatedRouteStub, click, newEvent, Router, RouterStub
  } from '../../testing';
  
  import { Hero }                from '../model';
  import { HeroDetailComponent } from './hero-detail.component';
  import { HeroDetailService }   from './hero-detail.service';
  import { HeroModule }          from './hero.module';
  
  ////// Testing Vars //////
  let activatedRoute: ActivatedRouteStub;
  let comp: HeroDetailComponent;
  let fixture: ComponentFixture<HeroDetailComponent>;
  let page: Page;
  
  ////////////////////
  function overrideSetup() {
    class HeroDetailServiceSpy {
        testHero = new Hero(42, 'Test Hero');
    
        getHero = jasmine.createSpy('getHero').and.callFake(
            () => Promise
            .resolve(true)
            .then(() => Object.assign({}, this.testHero))
        );
    
        saveHero = jasmine.createSpy('saveHero').and.callFake(
            (hero: Hero) => Promise
            .resolve(true)
            .then(() => Object.assign(this.testHero, hero))
        );
    }
  
    // the `id` value is irrelevant because ignored by service stub
    beforeEach(() => activatedRoute.testParamMap = { id: 99999 } );
  
    beforeEach( async(() => {
      TestBed.configureTestingModule({
        imports:   [ HeroModule ],
        providers: [
          { provide: ActivatedRoute, useValue: activatedRoute },
          { provide: Router,         useClass: RouterStub},
          // HeroDetailService at this level is IRRELEVANT!
          { provide: HeroDetailService, useValue: {} }
        ]
      })
  
      // Override component's own provider
      .overrideComponent(HeroDetailComponent, {
        set: {
          providers: [
            { provide: HeroDetailService, useClass: HeroDetailServiceSpy }
          ]
        }
      })
  
      .compileComponents();
    }));
  
    let hdsSpy: HeroDetailServiceSpy;
  
    beforeEach( async(() => {
      // createComponent();
      // get the component's injected HeroDetailServiceSpy
      hdsSpy = fixture.debugElement.injector.get(HeroDetailService) as any;
    }));
  
    it('should have called `getHero`', () => {
      expect(hdsSpy.getHero.calls.count()).toBe(1, 'getHero called once');
    });
  
    it('should display stub hero\'s name', () => {
      expect(page.nameDisplay.textContent).toBe(hdsSpy.testHero.name);
    });
  
    it('should save stub hero change', fakeAsync(() => {
      const origName = hdsSpy.testHero.name;
      const newName = 'New Name';
  
      page.nameInput.value = newName;
      page.nameInput.dispatchEvent(newEvent('input')); // tell Angular
  
      expect(comp.hero.name).toBe(newName, 'component hero has new name');
      expect(hdsSpy.testHero.name).toBe(origName, 'service hero unchanged before save');
  
      click(page.saveBtn);
      expect(hdsSpy.saveHero.calls.count()).toBe(1, 'saveHero called once');
  
      tick(); // wait for async save to complete
      expect(hdsSpy.testHero.name).toBe(newName, 'service hero has new name after save');
      expect(page.navSpy.calls.any()).toBe(true, 'router.navigate called');
    }));
  
    it('fixture injected service is not the component injected service',
      inject([HeroDetailService], (service: HeroDetailService) => {
  
      expect(service).toEqual({}, 'service injected from fixture');
      expect(hdsSpy).toBeTruthy('service injected into component');
    }));
  }